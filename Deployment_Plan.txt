1. Multi-Cloud Architecture
    It ensures fault tolerance, high availability, and disaster recovery by distributing resources 
    across multiple cloud providers (e.g., AWS, Google Cloud, Azure, Huwaei, etc).
    It will also avoid vendor lock in.

2. CDNs (Content Delivery Networks)
    CDNs cache static content closer to users, improving download/upload speeds and reducing latency.

3. Kubernetes for Dynamic Infrastructure Scaling
    It provides automated scaling, resource management, and orchestration based on traffic load, so 
    flexibility to scale infrastructure dynamically and efficiently based on real-time demand.

4. Message Queues & Celery
    Message queues enable asynchronous communication between microservices, allowing tasks to be queued 
    and processed in the background, improving the responsiveness of the system. Celery is a distributed 
    task queue that integrates well with message brokers to manage background tasks such as email verification, 
    file processing, and file downloading.

5. Caching Layer
    Caching frequently accessed data reduces latency and offloads traffic from backend systems.
    Benefits: Faster access to files and reduced load on databases. 

6. Load Balancers
    Distribute incoming traffic evenly across servers to prevent overloads and improve fault tolerance.

7. Auto-Scaling and Traffic Throttling
    Auto-scaling ensures the system adjusts to varying traffic levels, and traffic throttling prevents 
    system overloads.

8. Docker
    Docker ensures that the application runs consistently across different environments 
    (local, staging, production), minimizing issues related to system dependencies.

    Allows for easy scaling by creating and managing multiple containers, ideal for microservices 
    and handling traffic spikes.
    
    Containers can run on any platform that supports Docker, making it easy to move between different environments or 
    cloud providers.
    
    It integrates seamlessly with continuous integration and delivery pipelines, enabling automated testing and deployment. 

------------------------------------------------------------------------------------------------------------------------------------------
I have added email verification as well, its working fine but the integration is not done completely (because of the submission deadline).

Flow of application:
    1) Run the following commands before starting the app:
        python manage.py makemigrations file_sharing_system
        python manage.py migrate
    2) to start the application run 'python manage.py runserver'
    3) SignUp as Ops user/ Client User
    4) A link will be showing console i.e. email verification link , if you will click, you will be redirected to verify the email. 
        You can access the link one time only, 2nd time it will be showing that Email verification failed (but verification has 
        already done, check the console for that).
    5) After loggin in you will be redirected to Upload Page/ Available Files page based on your user type.
